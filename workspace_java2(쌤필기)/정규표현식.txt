정규표현식(Regular Expression, Regex)
- 문자열을 처리하기 위한 패턴 기반 문자열(식)
- 정규표현식을 통해 처리할 문자열 패턴을 지정하고
  특정 클래스 등을 사용하여 정규표현식에 해당하는지 여부를 체크
- ex) 패스워드 유효성 검사나 전화번호or이메일 양식 검사 등(Validation Check 라고 함)
- 프로그램 개발 뿐만 아니라 네트워크, 웹 등에서 공용으로 사용 가능한 표준 표현 방법
  (프로그램 언어도 자바 뿐만 아니라 자바스크립트 등 다양한 언어에서 활용 가능)
  
< 정규표현식에 사용되는 패턴 문자 = 메타 문자(Meta Character) >
=> x 또는 y 라는 문자를 기준으로 앞 또는 뒤에 기호를 붙여 패턴 지정
[ 일반적인 기호 ]
1. ^x : x로 시작하는 문자열
   ex) "x", "xa", "xxx", "xab"... => 사용 가능한 문자열(패턴 규칙에 부합됨)
       "ya", "yx", "yyy", "y"...  => 사용 불가능한 문자열(패턴 규칙에 부합되지 않음)
   ex2) x 가 숫자라는 의미일 때 : "숫자admin"(O), "숫자123"(O), "admin123"(X)

2. x$ : x로 끝나는 문자열
   ex) "x", "ax", "xxx", "abx"... => 사용 가능
       "xy", "yyy", "xab"...      => 사용 불가능
------------------------------------------------------------------------------
만약, x 로 시작해서 x로 끝나는 문자열일 경우(= x만 존재해야하는 경우)
=> ^x$ : "x"(O), "xy"(X), "x1"(X), "ax"(X)
--------------------------------------------------------------------------
3. .x : x 앞에 1개의 문자가 포함되는 문자열
   ex) "ax", "bx", "abxy"... => 사용 가능
       "xa", "xb"...         => 사용 불가능

4. x+ : x가 1번 이상 반복되는 문자열
   ex) "x", "xx", "xxx"...

5. x* : x가 0번 이상 반복되는 문자열
   ex) "", "a", "x", "xxx"... => 사용 가능(단독으로 사용하면 아무 문자열이나 모두 해당함)
   => 주로 다른 패턴과 결합하여 사용함


6. x? : x가 나올 수도 있고, 나오지 않을 수도 있는 문자열
   ex) "x", "", "a"... => 사용 가능(단독으로 사용하면 아무 문자열이나 모두 해당함)
   => 주로 다른 패턴과 결합하여 사용함

7. x|y : x 또는 y 가 포함되는 문자열
   ex) "x", "y", "xy"... => 사용 가능
------------------------------------------------------------------------------
예시)
1) xa?y$
=> 시작되는 문자는 상관없으나, 문자열 내에서 x가 앞에 오고
   x 뒤의 문자로 a가 올 수도 있고, 안 올 수도 있으며
   반드시 마지막은 y로 끝나는 문자열
ex) "xy"(O) => x 로 시작하고 a는 없지만 y로 끝나는 문자열
    "xay"(O) => x 로 시작하고 x 다음 문자가 a이고, y로 끝나는 문자열
    "hixy"(O) => x 앞의 문자열 무관, x 뒤의 문자가 y로 끝나는 문자열
    "hixzy"(X) => x 앞의 문자열 무관, x 뒤의 문자가 a 또는 y 가 아니므로 사용 불가
    "xyz"(X) => x 뒤의 문자가 a 또는 y 이지만, y로 끝나지 않으므로 사용 불가

2) x|a?y$
=> 시작되는 문자는 상관없으나, 문자열에 x가 포함되거나 또는 a?y$ 가 포함된 문자열
ex) "xy"(O), "hixy"(O), "hixay"(O), "ay1"(X)

==============================================================================
[ 괄호 문자 ]
1. (xy) : 소괄호 안의 내용(xy)이 그대로 포함되는 문자열(괄호 안의 문자열 그룹화)
   ex) "xy"(O), "yx"(X), "axy"(O)

2. x{n} : x가 n번만큼 반복되는 문자열(정확히 n번)
   ex) x{5} : x가 5번 반복. "xxxxx"(O), "xxxx"(X)

3. x{n,} : x가 n번 이상 반복되는 문자열
   ex) x{5,} : x가 5번 이상 반복. "xxxxx"(O), "xxxxxx"(O)

4. x{n,m} : x가 n번 이상, m번 이하만큼 반복되는 문자열
   ex) x{2,4} : x가 2번 이상 4번 이하 반복. "xx"(O), "xxx"(O), "xxxx"(O), "x"(X)

5. [] 대괄호는 괄호 내의 구성요소를 확인하는 용도로 사용(괄호 안의 내용 중 한 글자)
   5-1. [x] : x가 포함되는 문자 1개
   5-2. [^x] : x가 포함되지 않는 문자 1개(^ 기호를 대괄호 안에 사용할 경우 부정의 의미로 사용됨)
   5-3. [x-y] : x 부터 y 까지의 문자 중 1개
        => [A-Z] : 대문자 A 부터 대문자 Z 까지 중 1개 문자
           [a-z] : 소문자 a 부터 소문자 z 까지 중 1개 문자
           [0-9] : 숫자 1개
           [가-힣] : 한글 1개 문자
   => 주로 중괄호(반복 지정)와 조합하여 많이 사용됨
   ex) [가-힣]{2,5} : 한글 2글자에서 5글자 사이  => 주로 한글 이름 확인에 사용
       [A-Za-z]{2,8} : 영문자(대문자 또는 소문자) 2글자 ~ 8글자
       [A-Za-z0-9]{4,16} : 영문자 또는 숫자 4 ~ 16글자 사이
   ex2) 식별자 작성 규칙
        1) 첫글자 숫자 사용 불가(첫글자는 영문자, 한글, 특수문자 $ 또는 _ 만 사용 가능)
        2) 특수문자 $ 또는 _ 만 사용 가능
        3) 예약어 사용 불가
        4) 대소문자 구별
        => 1번, 2번 규칙을 적용하여 정규표현식으로 나타낼 경우
        "^[A-Za-z가-힣$_][A-Za-z가-힣$_0-9]{0,}$" 
------------------------------------------------------------------------------
예시)
1) a{1}b{2}c{2,4} => a가 1번, b가 2번, c가 2번 이상 4번 이하 반복되는 문자열
   ex) "abbcc"(O), "abbccc"(O), "abbcccc"(O)
       "abbc"(X), "aabbcc"(X)

2) (a1){2}b{2,3}c{2,} => (a1) 그룹이 2번, b가 2번 이상 3번 이하, c가 2번 이상 반복되는 문자열
   ex) "a1a1bbccc"(O), "a1a1bbbccccccccccccc"(O)
       "a1bbccc"(X), "a1bbbc"(X)
=================================================================================
[ 예외 문자 - 자바의 이스케이프 문자(\n) 같은 특정 기능을 수행하는 역할 ]
\^ : ^ 기호를 패턴으로 인식하지 않고, 일반 문자로 인식
\d : 숫자 => [0-9] 와 동일
\D : 숫자가 아닌 것
\s : 공백문자
\S : 공백이 아닌 것
\w : 영단어 구성요소(알파벳, 숫자, _)
\W : 영단어 구성요소가 아닌 것
---------------------------------------------------------------------------------
< 유용한 정규표현식 예 >
1. 한글 이름(2글자 ~ 5글자 사이) : ^[가-힣]{2,5}$
2. 휴대폰 번호 : ^(010|011)[-\s]?\d{3,4}[-\s]?\d{4}$
   1) ^(010|011) : 010 또는 011 로 시작
   2) [-\s]? : - 기호 또는 공백이 포함될 수도 있고, 포함되지 않을 수도 있음
   3) \d{3,4} : 숫자 3자리 또는 4자리
   4) \d{4}$ : 숫자 4자리로 끝
   => 010 또는 011로 시작하고, - 기호 또는 공백이 포함되거나 포함되지 않고, 그 뒤에
      숫자 3자리 또는 4자리가 오고, 그 뒤에 - 기호 또는 공백이 포함되거나 포함되지 않고,
      마지막은 숫자 4자리로 끝나는 문자열

   


















